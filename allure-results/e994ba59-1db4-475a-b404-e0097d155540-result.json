{"name": "test_login[chrome-invalid-invalid-Your username is invalid!]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_main.TestLogin object at 0x000001B93D69E710>, setup_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a43a8805c0ce854e0d770b4d8e9ccf2\")>, username = 'invalid'\npassword = 'invalid', expected = 'Your username is invalid!'\n\n    @pytest.mark.flaky(reruns=2, reruns_delay=1)\n    @pytest.mark.parametrize(\"username, password, expected\", [\n        (TEST_USER, TEST_PASS, \"You logged into a secure area!\"),\n        (\"invalid\", \"invalid\", \"Your username is invalid!\")\n    ])\n    def test_login(self, setup_driver, username, password, expected):\n        \"\"\"Тест авторизації з явним очікуванням\"\"\"\n        logger.info(f\"Тестування логіну з користувачем: {username}\")\n        setup_driver.get(f\"{BASE_URL}/login\")\n    \n        # Скріншот перед спробою логіну\n        screenshot_path = f\"screenshots/before_login_{username}.png\"\n        setup_driver.save_screenshot(screenshot_path)\n        logger.info(f\"Скріншот перед логіном збережено: {screenshot_path}\")\n    \n        # Заповнення форми\n        setup_driver.find_element(By.ID, \"username\").send_keys(username)\n        setup_driver.find_element(By.ID, \"password\").send_keys(password)\n        setup_driver.find_element(By.CSS_SELECTOR, \"button.radius\").click()\n    \n        # Скріншот після спроби логіну\n        screenshot_path = f\"screenshots/after_login_{username}.png\"\n        setup_driver.save_screenshot(screenshot_path)\n        logger.info(f\"Скріншот після логіну збережено: {screenshot_path}\")\n    \n        # Чекаємо повідомлення або зміни URL\n        try:\n>           WebDriverWait(setup_driver, 15).until(\n                EC.any_of(\n                    EC.url_contains(\"/secure\"),\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"div.flash\"))\n                )\n            )\n\ntest_main.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2a43a8805c0ce854e0d770b4d8e9ccf2\")>, method = <function any_of.<locals>.any_of_condition at 0x000001B93D745DA0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "Тест авторизації з явним очікуванням", "attachments": [{"name": "log", "source": "9c091a7a-c69b-41b6-a7b4-36e27f6c8c91-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_driver", "value": "'chrome'"}, {"name": "username", "value": "'invalid'"}, {"name": "password", "value": "'invalid'"}, {"name": "expected", "value": "'Your username is invalid!'"}], "start": 1744246041847, "stop": 1744246058457, "uuid": "9ac91f0c-1ca0-436c-ba5f-b9b52c0b5b24", "historyId": "b13a8bdf4f89d5e6c5221a3fb93a435e", "testCaseId": "c7ee2b91e3f08f447c6f17b1825c011b", "fullName": "test_main.TestLogin#test_login", "labels": [{"name": "tag", "value": "flaky(reruns=2, reruns_delay=1)"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-5O6L9BB"}, {"name": "thread", "value": "13940-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_main"}]}